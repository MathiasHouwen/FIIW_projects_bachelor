const express = require('express');
const bodyParser = require('body-parser');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const dotenv = require('dotenv');
const mysql = require('mysql2/promise'); 


dotenv.config();

const app = express();
app.use(bodyParser.json());

const PORT = process.env.PORT || 3000;
const users = []; // In-memory "database"

// Secret key for JWT
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

const dbConfig = {
    host: 'host.docker.internal',   
    user: 'root',                   
    password: '',                   
    database: 'clouduserdb'         
};

// Route to handle user registration
app.post('/register', async (req, res) => {
    const { username, password, rank, email, sex } = req.body;

    if (!username || !password || !rank || !email || !sex) {
        return res.status(400).json({ message: 'Username, password, rank, email, and sex are required.' });
    }

    // Validate email format (basic example)
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; // Regex generated by genAI
    if (!emailRegex.test(email)) {
        return res.status(400).json({ message: 'Invalid email format.' });
    }

    const validRanks = ['hp', 'lp', 'schacht', 'lid', 'comu'];
    const validSexes = ['male', 'female', 'other'];
    if (!validRanks.includes(rank.toLowerCase())) {
        return res.status(400).json({ message: 'Invalid rank' });
    }
    if (!validSexes.includes(sex.toLowerCase())) {
        return res.status(400).json({ message: 'Invalid sex. Valid options are: male, female, other.' });
    }

    try{
        const connection = await mysql.createConnection(dbConfig);

        // Check if the user or email already exists
        const [existingUser] = await connection.execute(
            'SELECT * FROM users WHERE username = ? OR email = ?',
            [username, email]
        );

        if (existingUser.length > 0) {
            return res.status(400).json({ message: 'Username or email already exists.' });
        }

        const hashedPassword = await bcrypt.hash(password, 10);

        // Insert the new user into the database
        await connection.execute(
            'INSERT INTO users (username, password, rank, email, sex) VALUES (?, ?, ?, ?, ?)',
            [username, hashedPassword, rank.toLowerCase(), email, sex.toLowerCase()]
        );

        // Close the database connection
        await connection.end();
        res.status(201).json({ message: 'User registered successfully.' });

    } catch (error){
        console.error('Database error:', error);
        res.status(500).json({ message: 'Internal server error.' });
    }
});

// Route to handle login
app.post('/login', async (req, res) => {
    const { username, password } = req.body;

    if (!username || !password) {
        return res.status(400).json({ message: 'Username and password are required.' });
    }

    try{
        const connection = await mysql.createConnection(dbConfig);

        // Check if the user or email already exists
        const [users] = await connection.execute(
            'SELECT * FROM users WHERE username = ?',
            [username]
        );

        await connection.end();

        if (users.length === 0) {
            return res.status(400).json({ message: 'Invalid credentials.' });
        }

        const user = users[0];
        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
            return res.status(400).json({ message: 'Invalid credentials.' });
        }

        // Generate token
        const token = jwt.sign({ username: user.username }, JWT_SECRET, { expiresIn: '1h' });

        res.json({ token });

    } catch (error){
        console.error('Database error:', error);
        res.status(500).json({ message: 'Internal server error.' });
    }
});

// Start server
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
